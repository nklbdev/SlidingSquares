import com.badlogic.gdx.tools.texturepacker.TexturePacker
apply plugin: "java"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.polly5315.slidingsquares.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

task packGraphics << {
    def inkscapeComPath = "C:\\Program Files\\Inkscape\\inkscape.com"

    def sourceRootDir = file("../graphics/source")
    def buildRootDir = file("../graphics/build")
    def outputRootDir = file("../android/assets/graphics")
    if (buildRootDir.exists())
        GFileUtils.cleanDirectory(buildRootDir)
    else
        GFileUtils.mkdirs(buildRootDir)

    if (outputRootDir.exists())
        GFileUtils.cleanDirectory(outputRootDir)
    else
        GFileUtils.mkdirs(outputRootDir)

    for(File svgFile: sourceRootDir.listFiles()) {
        //todo get filename without extension
        def svgWithoutExt = svgFile.name.lastIndexOf('.').with {it != -1 ? svgFile.name[0..<it] : svgFile.name}
        def buildDir = new File(buildRootDir, svgWithoutExt)
        GFileUtils.mkdirs(buildDir)
        new XmlSlurper().parse(svgFile).'**'.findAll {n -> n.title?.text()}.each {n ->
            def targetFile = new File(buildDir, "${n.title.text()}.png")
            exec {
                executable inkscapeComPath
                args "--export-id=${n.@id}", "--export-id-only", "--export-png=\"${targetFile.path}\"", "${svgFile.path}"
            }
        }
        TexturePacker.process(buildDir.path, outputRootDir.path, svgWithoutExt);
    }
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}